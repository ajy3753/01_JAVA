package h.inherit;

public class Run {
	/*
	 * 상속이란 부모 클래스의 필드와 메소드를 자식 클래스에서 그대로 이어 받아 사용하는 것. (실제로 상속된 클래스를 통해서 객체 생성 시 부모
	 * 클래스의 객체도 생성이 된다.)
	 * 
	 * 상속의 장점 - 적은 양의 코드로 새로운 클래스를 정의하고 사용할 수 있다. - 코드를 공통으로 관리하기 때문에 코드의 추가나 변경이
	 * 용이하다(유지보수성이 좋음)
	 * 
	 * 상속의 특징 - 클래스 간의 다중상속이 불가(부모는 하나다) - 부모 클래스에 정의되어 있는 protected 필드는 자식 클래스에서 직접
	 * 접근이 가능하다.(pricate은 불가) - 자식 객체는 부모 클래스에 있는 메소드를 마치 내것처럼 호출할 수 있다. + 부모 클래스의
	 * 정의된 기능이 마음에 들지 않는다면 내 마음대로 수정할 수 있다(오버라이딩) - 명시되어있지는 않지만 모든 클래스(자바에서 제공하는
	 * 클래스, 직접 만든 클래스)는 Object라는 클래스의 후손이다. -> Object에 있는 메소드를 마음대로 호출해서 사용할 수 있다.
	 * -> 오버라이딩도 가능하다.
	 * 
	 * super() -> 부모 객체의 정보에 접근할 수 있는 키워드
	 * 
	 * 오버라이딩(Override) - 부모 클래스에 있는 메소드를 자식 클래스에서 내용만 재정의 하는 것
	 * 
	 * @Override
	 */
	public static void main(String[] args) {
		Desktop d1 = new Desktop();

		/*
		 * 객체가 생성되어있다면 객체 정보를 보기 위해서 참조변수를 출력하는 순간 무조건 toString 메소드가 호출된다. 참조변수에 객체의 주소가
		 * 없고 null이라면 null을 표시
		 * 
		 * 참조변수를 호출하면 자동으로 .toString()으로 호출된다. 오버라이딩 전 : Object 클래스의 toString() 실행 ->
		 * 풀클래스명 + @ + 객체의 주소를 암호화한 16진수값 오버라이딩 후 : Man 클래스(자식 클래스)의 toString()를 실행 ->
		 * 해당 객체가 가지고 있는 모든 필드의 값을 한 문자열로 반환
		 * 
		 * 오버라이딩 - 자식 클래스가 상속 받고 있는 부모 클래스의 메소드를 재정의 하는 것 - 부모가 제공하는 메소드를 자식이 일부 고쳐서
		 * 사용하겠다는 의미 - 자식 객체를 통해 실행 시 자식 메소드가 우선권ㅇ르 가지고 있다.
		 * 
		 * 오버라이딩 성립 조건 - 부모 메소드명과 메소드명이 동일 - 매개변수의 갯수, 자료형, 순서 동일(매개변수명X) - 반환형이 동일 - 부모
		 * 메소드의 접근제한자보다 범위가 같거나 커야한다.
		 */
		Man m = null;
		System.out.println(m);
	}
}
